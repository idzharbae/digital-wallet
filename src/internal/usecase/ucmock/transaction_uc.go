// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/idzharbae/digital-wallet/src/internal/usecase (interfaces: TransactionUC)
//
// Generated by this command:
//
//	mockgen -destination=ucmock/transaction_uc.go -package=ucmock github.com/idzharbae/digital-wallet/src/internal/usecase TransactionUC
//

// Package ucmock is a generated GoMock package.
package ucmock

import (
	context "context"
	reflect "reflect"

	entity "github.com/idzharbae/digital-wallet/src/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockTransactionUC is a mock of TransactionUC interface.
type MockTransactionUC struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionUCMockRecorder
}

// MockTransactionUCMockRecorder is the mock recorder for MockTransactionUC.
type MockTransactionUCMockRecorder struct {
	mock *MockTransactionUC
}

// NewMockTransactionUC creates a new mock instance.
func NewMockTransactionUC(ctrl *gomock.Controller) *MockTransactionUC {
	mock := &MockTransactionUC{ctrl: ctrl}
	mock.recorder = &MockTransactionUCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionUC) EXPECT() *MockTransactionUCMockRecorder {
	return m.recorder
}

// GetTopTransactingUsers mocks base method.
func (m *MockTransactionUC) GetTopTransactingUsers(arg0 context.Context) ([]entity.TotalDebit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopTransactingUsers", arg0)
	ret0, _ := ret[0].([]entity.TotalDebit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopTransactingUsers indicates an expected call of GetTopTransactingUsers.
func (mr *MockTransactionUCMockRecorder) GetTopTransactingUsers(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopTransactingUsers", reflect.TypeOf((*MockTransactionUC)(nil).GetTopTransactingUsers), arg0)
}

// GetUserTopTransactions mocks base method.
func (m *MockTransactionUC) GetUserTopTransactions(arg0 context.Context, arg1 string) ([]entity.UserTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserTopTransactions", arg0, arg1)
	ret0, _ := ret[0].([]entity.UserTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserTopTransactions indicates an expected call of GetUserTopTransactions.
func (mr *MockTransactionUCMockRecorder) GetUserTopTransactions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTopTransactions", reflect.TypeOf((*MockTransactionUC)(nil).GetUserTopTransactions), arg0, arg1)
}

// TransferBalance mocks base method.
func (m *MockTransactionUC) TransferBalance(arg0 context.Context, arg1, arg2 string, arg3 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferBalance", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransferBalance indicates an expected call of TransferBalance.
func (mr *MockTransactionUCMockRecorder) TransferBalance(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferBalance", reflect.TypeOf((*MockTransactionUC)(nil).TransferBalance), arg0, arg1, arg2, arg3)
}
