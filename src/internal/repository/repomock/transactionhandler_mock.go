// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/idzharbae/digital-wallet/src/internal/repository (interfaces: TransactionHandler)
//
// Generated by this command:
//
//	mockgen -destination=repomock/transactionhandler_mock.go -package=repomock github.com/idzharbae/digital-wallet/src/internal/repository TransactionHandler
//

// Package repomock is a generated GoMock package.
package repomock

import (
	context "context"
	reflect "reflect"

	repository "github.com/idzharbae/digital-wallet/src/internal/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockTransactionHandler is a mock of TransactionHandler interface.
type MockTransactionHandler struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionHandlerMockRecorder
}

// MockTransactionHandlerMockRecorder is the mock recorder for MockTransactionHandler.
type MockTransactionHandlerMockRecorder struct {
	mock *MockTransactionHandler
}

// NewMockTransactionHandler creates a new mock instance.
func NewMockTransactionHandler(ctrl *gomock.Controller) *MockTransactionHandler {
	mock := &MockTransactionHandler{ctrl: ctrl}
	mock.recorder = &MockTransactionHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionHandler) EXPECT() *MockTransactionHandlerMockRecorder {
	return m.recorder
}

// ExecuteTransaction mocks base method.
func (m *MockTransactionHandler) ExecuteTransaction(arg0 context.Context, arg1 repository.TransactionFunction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteTransaction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteTransaction indicates an expected call of ExecuteTransaction.
func (mr *MockTransactionHandlerMockRecorder) ExecuteTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteTransaction", reflect.TypeOf((*MockTransactionHandler)(nil).ExecuteTransaction), arg0, arg1)
}
