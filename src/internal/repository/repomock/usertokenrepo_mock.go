// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/idzharbae/digital-wallet/src/internal/repository (interfaces: UserTokenRepository)
//
// Generated by this command:
//
//	mockgen -destination=repomock/usertokenrepo_mock.go -package=repomock github.com/idzharbae/digital-wallet/src/internal/repository UserTokenRepository
//

// Package repomock is a generated GoMock package.
package repomock

import (
	context "context"
	reflect "reflect"

	repository "github.com/idzharbae/digital-wallet/src/internal/repository"
	pgx "github.com/jackc/pgx/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockUserTokenRepository is a mock of UserTokenRepository interface.
type MockUserTokenRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserTokenRepositoryMockRecorder
}

// MockUserTokenRepositoryMockRecorder is the mock recorder for MockUserTokenRepository.
type MockUserTokenRepositoryMockRecorder struct {
	mock *MockUserTokenRepository
}

// NewMockUserTokenRepository creates a new mock instance.
func NewMockUserTokenRepository(ctrl *gomock.Controller) *MockUserTokenRepository {
	mock := &MockUserTokenRepository{ctrl: ctrl}
	mock.recorder = &MockUserTokenRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserTokenRepository) EXPECT() *MockUserTokenRepositoryMockRecorder {
	return m.recorder
}

// GetUserNameByToken mocks base method.
func (m *MockUserTokenRepository) GetUserNameByToken(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserNameByToken", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserNameByToken indicates an expected call of GetUserNameByToken.
func (mr *MockUserTokenRepositoryMockRecorder) GetUserNameByToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserNameByToken", reflect.TypeOf((*MockUserTokenRepository)(nil).GetUserNameByToken), arg0, arg1)
}

// InsertUserToken mocks base method.
func (m *MockUserTokenRepository) InsertUserToken(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUserToken", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUserToken indicates an expected call of InsertUserToken.
func (mr *MockUserTokenRepositoryMockRecorder) InsertUserToken(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUserToken", reflect.TypeOf((*MockUserTokenRepository)(nil).InsertUserToken), arg0, arg1, arg2)
}

// WithTransaction mocks base method.
func (m *MockUserTokenRepository) WithTransaction(arg0 pgx.Tx) repository.UserTokenRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTransaction", arg0)
	ret0, _ := ret[0].(repository.UserTokenRepository)
	return ret0
}

// WithTransaction indicates an expected call of WithTransaction.
func (mr *MockUserTokenRepositoryMockRecorder) WithTransaction(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTransaction", reflect.TypeOf((*MockUserTokenRepository)(nil).WithTransaction), arg0)
}
